#!/usr/bin/python
## -----------------------------------------------------------------------------
#  \file   kgsync.py
#  \brief  Script to synchronise multiple git sub repositories in an easy to
#
#
#  Script can be used to create and manage a manifest file, which is used to
#  keep track of and update sub repositories within the current directory.
#  Whilst git sub-modules work wonderfully, there are some situations whereby
#  there can be problems initialising or updating them. As a result of this,
#  this script is an attempt to manage sub repositories in a more controlled
#  way.
#  For run-time errors caused by bad input, permissions issues etc, a useful
#  error message should be displayed followed by a polite exit.
#  For errors caused by developers entering jibberish, an exception should be
#  thrown.
# ------------------------------------------------------------------------------
#                  Kris Dunning ippie52@gmail.com 2016.
# ------------------------------------------------------------------------------

from sys import argv, exit
from os.path import isdir, isfile, join
from os import chdir, mkdir
from subprocess import Popen, PIPE
from pkgutil import simplegeneric
from optparse import OptionParser
import json

# ------------------------------------------------------------------------------
# Global definitions/variables
# ------------------------------------------------------------------------------
## Script version
KGSYNC_VERSION = (0.1)

## Method to generate a named C-ish style enumeration
def enum(**enums):
    return type('Enum', (), enums)

## Debug level enumerations
DEBUG_LEVEL = enum(NONE     = 0,
                   INFO     = 1,
                   WARNING  = 2,
                   ERROR    = 3,
                   SUCCESS  = 4)

## Dictionary of colours, keyed with their associated debug level
COLORS = {DEBUG_LEVEL.NONE      : '\033[0m',
          DEBUG_LEVEL.WARNING   : '\033[93m',
          DEBUG_LEVEL.ERROR     : '\033[91m',
          DEBUG_LEVEL.SUCCESS   : '\033[92m',
          DEBUG_LEVEL.INFO      : '\033[94m' }

## Dictionary of strings, keyed with their associated debug level
STRINGS = {DEBUG_LEVEL.NONE      : '',
           DEBUG_LEVEL.WARNING   : 'WARNING',
           DEBUG_LEVEL.ERROR     : 'ERROR',
           DEBUG_LEVEL.SUCCESS   : 'SUCCESS',
           DEBUG_LEVEL.INFO      : 'INFO'}

## The debug level for the script
debug_level = DEBUG_LEVEL.NONE

# ------------------------------------------------------------------------------
# Constants
# ------------------------------------------------------------------------------
## The default manifest name
DEFAULT_MANIFEST_NAME = "manifest.json"

# ------------------------------------------------------------------------------
#  The following functions are aimed to remove unsightly newlines and
#  white-space from JSON files.
# ------------------------------------------------------------------------------

## Helper function to get items, used to
@simplegeneric
def get_items(obj):
    while False:
        yield None

## Function to return the key value pair of a dictionary
@get_items.register(dict)
def _(obj):
    return obj.iteritems()

## Function to return the individual items of a list
@get_items.register(list)
def _(obj):
    return enumerate(obj)

## Function used to strip white-space from an object containing strings
def strip_whitespace(json_data):
    for k, v in get_items(json_data):
        if hasattr(v, 'strip'): # string
            json_data[k] = str(v.strip())
        else:
            strip_whitespace(v)

# ------------------------------------------------------------------------------
# Helper functions
# ------------------------------------------------------------------------------

## Debug output function; uses the current debug level to print out the messages
def debug_print(level, message, force=False):
    if level >= debug_level or force:
        print "%s%s:%s %s" % (COLORS[level], STRINGS[level], \
            COLORS[DEBUG_LEVEL.NONE], message)

## Prints the usage of this script
def usage(parser, level=DEBUG_LEVEL.NONE, message=None, result=None):
    if message is not None:
        debug_print(level, message)
    print COLORS[DEBUG_LEVEL.INFO]
    parser.print_help()
    print COLORS[DEBUG_LEVEL.NONE]
    if result is not None:
        exit(result)

# ------------------------------------------------------------------------------
# Class definitions
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
## This class contains the manifest information, used to add, remove, update or
#  generate manifest json files.
class Manifest:

    ## Manifest top-level categories
    ELE = enum(DIRS   = 'directories',
               META   = 'meta')

    ## Constructor
    def __init__(self, filename, create=False):
        ## The file name of this manifest file
        self.filename = filename
        ## Raw data obtained from the manifest
        self.raw_data = None
        ## The parsed data collection from the manifest file
        self.data = {}
        self.data[Manifest.ELE.META] = { 'version': KGSYNC_VERSION }
        self.data[Manifest.ELE.DIRS] = {}
        if not create:
            if not self.load(self.filename):
                debug_print(DEBUG_LEVEL.ERROR, "Could not load file %s." % self.filename)
                exit(1)


    ## Loads the existing manifest file
    def load(self, filename):
        result = False
        if isfile(filename):
            with open(filename, 'r') as man_file:
                self.raw_data = man_file.read()
                self.data = json.loads(self.raw_data)
                strip_whitespace(self.data)
                if self.data[Manifest.ELE.META]['version'] != KGSYNC_VERSION:
                    debug_print(DEBUG_LEVEL.WARNING, "Version mismatch")
                result = True

        return result

    ## Static method used to obtain the repository information for a directory
    @staticmethod
    def get_repo_info(directory):
        # 1. Check directory contains git folder
        git_location = join(directory, '.git')
        if not isdir(git_location):
            debug_print(DEBUG_LEVEL.ERROR, "Directory %s does not appear to contain a valid git repository." % directory)
            exit(1)

        # 2. Check to see whether it has any local changes
        chdir(directory)
        args = ['git', "diff-index", "--quiet", "HEAD", "--"]
        p = Popen(args)
        p.communicate()
        has_modifications = p.returncode
        # 3. Get the current sha1 ID of the commit
        args = ['git', "rev-parse", "HEAD"]
        p = Popen(args, stdout=PIPE)
        commit_id = p.communicate()[0]
        # 4. Get the remote information
        # args = ['git', 'remote', '-v']
        args = ['git', 'config', '--get', 'remote.origin.url']
        p = Popen(args, stdout=PIPE)
        origin = p.communicate()[0]
        if origin is None:
            debug_print(DEBUG_LEVEL.ERROR, "Could not obtain an origin directory for repository %d" % directory)
            exit(1)

        chdir("..")
        info = { 'repo': directory, 'valid': True, 'modified': has_modifications, 'commit': commit_id, 'origin': origin }
        strip_whitespace(info)
        return info


    ## Adds repositories to the manifest
    def add(self, dirs):
        existing = self.data[Manifest.ELE.DIRS].keys()
        result = True
        for d in dirs:
            if d in existing:
                # raise ValueError("Directory %s already exists; cannot add." % d)
                debug_print(DEBUG_LEVEL.WARNING, "Directory '%s' already exists; cannot add." % d)
                result = False
            else:
                debug_print(DEBUG_LEVEL.INFO, "Successfully added %s" % d)
            rinfo = Manifest.get_repo_info(d)
            self.data[Manifest.ELE.DIRS][d] = rinfo
            existing.append(d)
        return result


    ## Removes repositories to the manifest
    def rem(self, dirs):
        result = True
        existing = self.data[Manifest.ELE.DIRS].keys()
        for d in dirs:
            if d in existing:
                debug_print(DEBUG_LEVEL.INFO, "Removing %s from the repository list" % d)
                del self.data[Manifest.ELE.DIRS][d]
                existing.remove(d)
            else:
                debug_print(DEBUG_LEVEL.WARNING, "Cannot remove %s; it does not exist in the current manifest." % d)
                result = False
        return result

    ## Performs a sanity check on the provided directories against the existing values
    @staticmethod
    def sanity_check(dirs, existing):
        if dirs is not None:
            for d in dirs:
                if d not in existing:
                    debug_print(DEBUG_LEVEL.ERROR, "%s is not a known repository." % d)
                    exit(1)
        return True


    ## Updates one or more repositories. If no repositories are provided, all
    #  will be updated
    def update(self, dirs):
        existing = self.data[Manifest.ELE.DIRS].keys()

        # Quick sanity check on provided directories
        Manifest.sanity_check(dirs, existing)

        for e in existing:
            if len(dirs) == 0 or e in dirs:
                debug_print(DEBUG_LEVEL.INFO, "Updating data in repository %s" % e)
                self.data[Manifest.ELE.DIRS][e] = Manifest.get_repo_info(e)

        return True

    ## Synchronises one or more repositories. If no repositories are provided,
    #  all will be synchronised. The minimal flag will switch on/off minimal sync,
    #  and the stash flag will stash changes if present, otherwise an error will
    #  be issued instead.
    def sync(self, dirs, minimal, stash):
        existing = self.data[Manifest.ELE.DIRS].keys()
        Manifest.sanity_check(dirs, existing)

        for e in existing:
            if len(dirs) == 0 or e in dirs:
                debug_print(DEBUG_LEVEL.INFO, "Synchronising repository %s" % e)
                # Check directory exists, if not, clone it
                if isdir(e):
                    # 1a. Directory exists - go check what revision it's at
                    info = Manifest.get_repo_info(e)
                    if info['commit'] != self.data[Manifest.ELE.DIRS][e]['commit']:
                        # Mismatch in revision - go check stuff
                        debug_print(DEBUG_LEVEL.INFO, "Commit mismatch; attempting checkout at the required version")
                        Manifest.checkout(e, self.data[Manifest.ELE.DIRS][e]['commit'], stash)
                    elif info['modified']:
                        debug_print(DEBUG_LEVEL.WARNING, "Repository %s has been modified..." % e)
                        if stash:
                            debug_print(DEBUG_LEVEL.INFO, "Will now stash the changes...")
                            Manifest.stash(e)
                        else:
                            debug_print(DEBUG_LEVEL.WARNING, "Repository %s has modifications!")
                    else:
                        debug_print(DEBUG_LEVEL.INFO, "No changes")
                else:
                    # 1b. Directory doesn't exist - clone it
                    Manifest.clone(e, self.data[Manifest.ELE.DIRS][e]['origin'], self.data[Manifest.ELE.DIRS][e]['commit'], minimal)
        return True

    ## Displays the status of the current repositories tracked in the manifest file
    def display_status(self, dirs):
        existing = self.data[Manifest.ELE.DIRS].keys()
        Manifest.sanity_check(dirs, existing)

        for e in existing:
            if len(dirs) == 0 or e in dirs:
                if isdir(e):
                    # Get the current status of the
                    info = Manifest.get_repo_info(e)
                    # Is the commit different?
                    if info['commit'] != self.data[Manifest.ELE.DIRS][e]['commit']:
                        # Are there local modifications
                        if info['modified']:
                            Manifest.format_status(COLORS[DEBUG_LEVEL.ERROR], "OUT OF DATE", info)
                        else:
                            Manifest.format_status(COLORS[DEBUG_LEVEL.WARNING], "OUT OF DATE", info)
                    else:
                        if info['modified']:
                            Manifest.format_status(COLORS[DEBUG_LEVEL.WARNING], "UP TO DATE", info)
                        else:
                            Manifest.format_status(COLORS[DEBUG_LEVEL.SUCCESS], "UP TO DATE", info)

                else:
                    Manifest.format_status(COLORS[DEBUG_LEVEL.ERROR], "MISSING", info)

    ## Formats the status into a standard for the system
    @staticmethod
    def format_status(col, status, info):
        status = "%s%s:" % (col, status)
        status = status.ljust(20, ' ')
        mod_status = "(modified)" if info['modified'] else ""
        print "%s%s@%s %s%s" % (status, info['repo'], info['commit'], mod_status, COLORS[DEBUG_LEVEL.NONE])


    ## Static method to clone a repository into a given directory
    ## Returns True if  successful
    @staticmethod
    def clone(directory, remote, commit, minimal):
        result = False
        if not minimal:
            debug_print(DEBUG_LEVEL.INFO, "Performing a full clone %s into directory %s, please wait..." % (remote, directory))
            args = ['git', 'clone', remote, directory]
            p = Popen(args)
            p.communicate()
            if p.returncode:
                debug_print(DEBUG_LEVEL.ERROR, "Could not clone the repository: %s into %s" % (remote, directory))
            else:
                result = Manifest.checkout(directory, commit, False)
        else:
            # 1. Create shallow clone with depth 1
            debug_print(DEBUG_LEVEL.INFO, "Performing minimal clone of %s into directory %s, please wait..." % (remote, directory))
            depth = 10
            args = ['git', 'clone', '--depth', str(depth), remote, directory]
            p = Popen(args)
            p.communicate()
            if p.returncode:
                debug_print(DEBUG_LEVEL.ERROR, "Could not create shallow clone of git repository at %s into %s" % (remote, directory))
            else:
                chdir(directory)
                exists = Manifest.commit_exists(commit)
                # Check whether the commit exists, if not, increase the depth of the clone
                if not exists:
                    debug_print(DEBUG_LEVEL.INFO, "Commit not found, expanding depth. This may take some time...")

                while depth < 1000 and not exists:
                    depth += 20
                    args = ['git', 'fetch', '--depth', str(depth)]
                    p = Popen(args, stdout=PIPE, stderr=PIPE)
                    p.communicate()
                    if p.returncode:
                        debug_print(DEBUG_LEVEL.ERROR, "Failed to fetch more data")
                        result = False
                        chdir("..")
                        break
                    else:
                        exists = Manifest.commit_exists(commit)

            chdir("..")
            if result and exists:
                result = checkout(directory, commit, False)
            return result


    ## Checks out a particular commit (if possible) and stashes where permitted
    @staticmethod
    def checkout(directory, commit, stash):
        chdir(directory)
        # 1. Check to see whether the commit currently exists in the logs
        if Manifest.commit_exists(commit):
            debug_print(DEBUG_LEVEL.INFO, "Commit %s does not exist, retrieving..." % commit)
            # Doesn't exist, check whether we want a full fetch
        # else:
            # Does exist, just perform checkout
        args = ['git', 'checkout', commit]
        p = Popen(args, stdout=PIPE)
        p.communicate()
        if p.returncode:
            debug_print(DEBUG_LEVEL.ERROR, "Could not check out the commit %s" % commit)
        else:
            debug_print(DEBUG_LEVEL.SUCCESS, "Updated %s to commit %s" % (directory, commit))
        chdir("..")
        return True

    ## Checks whether a commit ID exists in the current repository
    ## Returns True if the commit exists
    @staticmethod
    def commit_exists(commit):
        args = ['git', 'cat-file', '-t', commit]
        p = Popen(args, stderr=PIPE, stdout=PIPE)
        p.communicate()
        return not p.returncode

    ## Stashes the local changes (if possible) to the repository
    ## Returns True if successful
    @staticmethod
    def stash(directory):
        chdir(directory)
        args = ['git', 'stash']
        p = Popen(args)
        p.communicate()
        chdir("..")
        return not p.returncode

    ## Saves changes to the manifest file in JSON format
    def save(self, filename=None):
        result = False
        old_v = self.data[Manifest.ELE.META]['version']
        # Check versions - if mismatch, warn user which way the save format is going
        if old_v != KGSYNC_VERSION:
            if old_v < KGSYNC_VERSION:
                debug_print(DEBUG_LEVEL.WARNING, "Saving file in updated format for version %s" % KGSYNC_VERSION)
            else:
                debug_print(DEBUG_LEVEL.WARNING, "Saving file in old format for version %s" % KGSYNC_VERSION)
            self.data[Manifest.ELE.META]['version'] = KGSYNC_VERSION

        if filename is None:
            filename = self.filename
        debug_print(DEBUG_LEVEL.INFO, "Writing to file: %s" % filename)
        with open(filename, 'w') as json_file:
            json_file.write(json.dumps(self.data, sort_keys=True, indent=4, separators=(',', ': '), ensure_ascii=True))
            result = True
        return result

    ## Provides the string representation of the manifest
    def __str__(self):
        return self.filename



# ------------------------------------------------------------------------------
# Options construction
# ------------------------------------------------------------------------------
## The usage string to be displayed by the option parser
basic_usage = "Usage: %prog [options] (repositories)"

## Option parser to handle all arguments for the script
parser = OptionParser(usage=basic_usage, version=KGSYNC_VERSION,
    description="kgsync is a tool to synchronise multiple git repositories within a top-level git repository.")
parser.add_option("-g", "--generate", action="store_true", help="Generates a new manifest file (requires directory argument -d).")
parser.add_option("-a", "--add", action="store_true", help="Adds a sub repository to the manifest file (requires directory argument -d)")
parser.add_option("-r", "--remove", action="store_true", help="Removes a sub repository from the manifest file (required directory argument -d).")
parser.add_option("-u", "--update", action="store_true", help="Updates the commit ID used for each repository to match the current commit ID", metavar="update")
parser.add_option("-s", "--sync", action="store_true", help="Synchronise repositories")
parser.add_option("-o", "--output", help="Specifies the output file name of the manifest file when generating, updating or amending." , \
                          metavar="file.json")
parser.add_option("-i", "--input", help="Specifies the name of the input manifest file", metavar="file.json", default=DEFAULT_MANIFEST_NAME)
parser.add_option("-m", "--minimal", action="store_true", help="Minimalistic clone. Potentially beneficial for large repositories (may be slower)")
parser.add_option("-S", "--stash", action="store_true", help="Stashes any changes before syncing, generating or updating")
parser.add_option("-d", "--debug", help="Sets the level of debug (default warning and above)", metavar="level", default=DEBUG_LEVEL.INFO)


## Confirms directories - The function will return True if all directories exist
def confirm_dirs_exist(dirs):
    all_exist = True
    for d in dirs:
        all_exist = all_exist and isdir(d)
    return all_exist

## Checks that all repositories are free from changes, or stashes them if permitted
def check_repos_and_stash(manifest, stash):
    result = True
    for directory, values in manifest.data[Manifest.ELE.DIRS].iteritems():
        if manifest.data[Manifest.ELE.DIRS][directory]['modified']:
            if stash:
                if not Manifest.stash(directory):
                    debug_print(DEBUG_LEVEL.ERROR, "Error attempting to stash changes in directory %s." % directory)
                    result = False
                    break
                else:
                    debug_print(DEBUG_LEVEL.WARNING, "Stashed changes in %s" % directory)
            else:
                debug_print(DEBUG_LEVEL.ERROR, "Modifications present in %s. Please stash or commit these before continuing." % directory)
                result = False
                break
    return result

## Generates a manifest file for the given repositories
def generate_repos(dirs, manifest, stash):
    result = False
    debug_print(DEBUG_LEVEL.INFO, "Generating manifest: %s" % manifest)
    if manifest.add(dirs) and check_repos_and_stash(manifest, stash):
        if manifest.save():
            debug_print(DEBUG_LEVEL.SUCCESS, "Manifest file %s generated." % manifest)
            result = True
        else:
            debug_print(DEBUG_LEVEL.ERROR, "Failed to save file %s" % manifest)
    else:
        debug_print(DEBUG_LEVEL.ERROR, "There was a problem adding directories to the manifest.")
    return result


## Adds repositories to the manifest file
def add_repos(dirs, manifest, stash, filename):
    result = False
    debug_print(DEBUG_LEVEL.INFO, "Adding to manifest: %s" % manifest)
    if manifest.add(dirs) and check_repos_and_stash(manifest, stash):
        if manifest.save(filename):
            debug_print(DEBUG_LEVEL.SUCCESS, "Directories were successfully added to %s." % manifest)
            result = True
        else:
            debug_print(DEBUG_LEVEL.ERROR, "Failed to save file %s" % manifest)
    else:
        debug_print(DEBUG_LEVEL.ERROR, "There was a problem adding directories to the manifest.")
    return result

## updates repositories in the current manifest file
def update_repos(dirs, manifest, stash, filename):
    result = False
    debug_print(DEBUG_LEVEL.INFO, "Updating manifest: %s" % manifest)
    if manifest.update(dirs) and check_repos_and_stash(manifest, stash):
        if manifest.save(filename):
            debug_print(DEBUG_LEVEL.SUCCESS, "Repositories are up to date.")
            result = True
    else:
        debug_print(DEBUG_LEVEL.ERROR, "There was a problem updating the manifest.")
    return result

## Removes repositories from the manifest file
def remove_repos(dirs, manifest, filename):
    result = False
    debug_print(DEBUG_LEVEL.INFO, "Removing from manifest: %s" % manifest)
    if manifest.rem(dirs): # Don't need to check whether they have local modifications. Screw 'em!
        if manifest.save(filename):
            debug_print(DEBUG_LEVEL.SUCCESS, "Directories were successfully removed from %s." % manifest)
            result = True
        else:
            debug_print(DEBUG_LEVEL.ERROR, "Failed to save file %s" % manifest)
    else:
        debug_print(DEBUG_LEVEL.ERROR, "Failed to remove requested directories from the manifest %s" % manifest)
    return result

## Displays the current status of the manifest and the tracked repositories
def display_repo_status(manifest, directories):
    manifest.display_status(directories)


## Synchronises the repositories
#
# If no directories are provided, all will be synchronised
# If minimal is set to true, clones and checkouts will be performed on a minimalistic basis
# If stash is set to true, any changes will be stashed before applying the sync
def sync_repos(dirs, manifest, minimal, stash):
    result = False
    debug_print(DEBUG_LEVEL.INFO, "Synchronising repositories in manifest: %s" % manifest)
    if manifest.sync(dirs, minimal, stash):
        debug_print(DEBUG_LEVEL.SUCCESS, "Synchronisation complete.")
        result = True
    else:
        debug_print(DEBUG_LEVEL.ERROR, "There was a problem synchronising the repositories.")
    return result

## Options and unused arguments
opts, args = parser.parse_args()

## The directories provided
directories = [d.strip('/') for d in args]

# debug_level = int(options.get('debug').value)
debug_level = int(opts.debug)

# Check to see whether add, remove, update or generate options have been signalled
## The count of how many primary options have been flagged
primary_count = 0
primary_count += 1 if opts.generate else 0
primary_count += 1 if opts.add else 0
primary_count += 1 if opts.remove else 0
primary_count += 1 if opts.update else 0
primary_count += 1 if opts.sync else 0

if primary_count > 1:
    usage(parser, DEBUG_LEVEL.ERROR, "Only one action can be provided (generate, update, add, remove or sync)", 1)
elif primary_count == 1 and not confirm_dirs_exist(directories):
    usage(parser, DEBUG_LEVEL.ERROR, "Not all directories exist. Ensure directories are listed after all options", 1)


## Stash flag
stash = opts.stash
## The manifest file
manifest = None

# Generate manifest file
if opts.generate:
    ## The output file name to save to
    output_file = opts.output if opts.output is not None else DEFAULT_MANIFEST_NAME
    manifest = Manifest(output_file, True)
    generate_repos(directories, manifest, stash)
# Adds a directory to the manifest
elif opts.add:
    manifest = Manifest(opts.input)
    add_repos(directories, manifest, stash, opts.output)
# Removes a directory from the manifest
elif opts.remove:
    manifest = Manifest(opts.input)
    remove_repos(directories, manifest, opts.output)
# Updates the current directories commits
elif opts.update:
    manifest = Manifest(opts.input)
    update_repos(directories, manifest, stash, opts.output)
# Synchronises the directories to match the required values
elif opts.sync:
    manifest = Manifest(opts.input)
    sync_repos(directories, manifest, opts.minimal, stash)
# Displays the manifest information
else:
    manifest = Manifest(opts.input)
    display_repo_status(manifest, directories)

